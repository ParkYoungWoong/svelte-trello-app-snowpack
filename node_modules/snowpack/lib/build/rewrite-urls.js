"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMountedUrl = exports.transformMountedUrl = exports.defaultFileExtensionMapping = void 0;
const path_1 = __importDefault(require("path"));
const util_1 = require("../util");
exports.defaultFileExtensionMapping = {
    '.mjs': '.js',
    '.jsx': '.js',
    '.ts': '.js',
    '.tsx': '.js',
    '.vue': '.js',
    '.svelte': '.js',
    '.mdx': '.js',
    '.svx': '.js',
    '.elm': '.js',
    '.yaml': '.json',
    '.toml': '.json',
    '.php': '.html',
    '.md': '.html',
    '.ejs': '.html',
    '.njk': '.html',
    '.scss': '.css',
    '.sass': '.css',
    '.less': '.css',
};
function transformMountedUrl(fileLoc, [dirDisk, toUrl], config) {
    const { baseExt } = util_1.getExt(fileLoc);
    const resolvedDirUrl = toUrl === '/' ? '' : toUrl;
    return util_1.replaceExt(fileLoc.replace(dirDisk, resolvedDirUrl).replace(/[/\\]+/g, '/'), baseExt, config._extensionMap[baseExt] || exports.defaultFileExtensionMapping[baseExt] || baseExt);
}
exports.transformMountedUrl = transformMountedUrl;
function getMountedUrl(fileLoc, config) {
    for (const [dirDisk, toUrl] of Object.entries(config.mount)) {
        if (fileLoc.startsWith(dirDisk + path_1.default.sep)) {
            return transformMountedUrl(fileLoc, [dirDisk, toUrl], config);
        }
    }
    return null;
}
exports.getMountedUrl = getMountedUrl;
//# sourceMappingURL=rewrite-urls.js.map